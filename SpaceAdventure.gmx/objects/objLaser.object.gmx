<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBeam</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//attributes
laser_max_length = 800;  //max length of laser beam
laser_sprite_width = sprite_get_width(sprBeam);
laser_sprite_height = sprite_get_height(sprBeam);
laser_mount_x = 14;  //position of laser origin relative to unrotated shooter
laser_mount_y = 0;   //position of laser origin relative to unrotated shooter
laser_sprite_origin_y = sprite_get_yoffset(sprBeam);  //this is used to make sure the laser surface is drawn in the correct position

image_speed = 1/3

//variables
counter = 0;
laser_surf = -3;

alarm[0] = 15;

texture_set_interpolation(true);

laser_hit = false;

image_angle = gunAngle;
var c = dcos(image_angle);
var se = dsin(image_angle);   
    
var de = 1;
var ch = 0.5;
var we = c*laser_max_length;
var h = -se*laser_max_length;
    
laser_origin_x = x + laser_mount_x*c + laser_mount_y*se;
laser_origin_y = y + laser_mount_y*c - laser_mount_x*se;
  
var limit = 1/laser_max_length; //indicates accuracy of collision point calculation "1" = pixel perfect
var inst = collision_line(laser_origin_x,laser_origin_y,laser_origin_x+we,laser_origin_y+h,obj_target,1,1);
if instance_exists(inst)
    {
    //laser has hit something
    //the code in this if statement computes where the end of the laser should be.
    laser_hit = true;
    de -= ch;
    ch *= 0.5;
    while ch &gt; limit {
        var ix = laser_origin_x + we*de;
        var iy = laser_origin_y + h*de;
        var inst2 = collision_line(laser_origin_x,laser_origin_y,ix,iy,obj_target,1,1);
        if instance_exists(inst2) {
            de -= ch;
            inst = inst2;
        }
        else 
            de += ch;
        ch *= 0.5;
    }
    laser_end_x = ix;
    laser_end_y = iy;
    //At this point, inst = the instance that was hit by the laser.
    //so if you want to cause damage to it you could do something like: "inst.hp -= (1.0-laser_length)*5.0"
}
    
laser_length = de;  //laser length is now equal to d.  (0 = no length, 1 = max_length)
laser_color2 = make_color_hsv(random(255),255,255); //central beam color
laser_alpha = sin(counter++*2.0)*(0.5+random(0.5))*0.3+0.7;  //make laser alpha pulsate
laser_surface_x = laser_origin_x - laser_sprite_origin_y*se;  //subtract laser sprite origin so that laser surface is drawn at correct position
laser_surface_y = laser_origin_y - laser_sprite_origin_y*c; //subtract laser sprite origin so that laser surface is drawn at correct position
laser_part_length = laser_sprite_width*laser_length  //compute what section of laser sprite we will be drawing to the laser surface
laser_draw_length = laser_max_length / laser_sprite_width * laser_length;  //compute xscale to stretch laser surface
laser_direction = image_angle;  //angle of laser
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>laser_hit = false;

var c = dcos(image_angle);
var se = dsin(image_angle);   
    
var de = 1;
var ch = 0.5;
var we = c*laser_max_length;
var h = -se*laser_max_length;
    
laser_origin_x = x + laser_mount_x*c + laser_mount_y*se;
laser_origin_y = y + laser_mount_y*c - laser_mount_x*se;
  
var limit = 1/laser_max_length; //indicates accuracy of collision point calculation "1" = pixel perfect
var inst = collision_line(laser_origin_x,laser_origin_y,laser_origin_x+we,laser_origin_y+h,obj_target,1,1);
if instance_exists(inst)
    {
    //laser has hit something
    //the code in this if statement computes where the end of the laser should be.
    laser_hit = true;
    de -= ch;
    ch *= 0.5;
    while ch &gt; limit {
        var ix = laser_origin_x + we*de;
        var iy = laser_origin_y + h*de;
        var inst2 = collision_line(laser_origin_x,laser_origin_y,ix,iy,obj_target,1,1);
        if instance_exists(inst2) {
            de -= ch;
            inst = inst2;
        }
        else 
            de += ch;
        ch *= 0.5;
    }
    laser_end_x = ix;
    laser_end_y = iy;
    //At this point, inst = the instance that was hit by the laser.
    //so if you want to cause damage to it you could do something like: "inst.hp -= (1.0-laser_length)*5.0"
}
    
laser_length = de;  //laser length is now equal to d.  (0 = no length, 1 = max_length)
laser_color2 = make_color_hsv(random(255),255,255); //central beam color
laser_alpha = sin(counter++*2.0)*(0.5+random(0.5))*0.3+0.7;  //make laser alpha pulsate
laser_surface_x = laser_origin_x - laser_sprite_origin_y*se;  //subtract laser sprite origin so that laser surface is drawn at correct position
laser_surface_y = laser_origin_y - laser_sprite_origin_y*c; //subtract laser sprite origin so that laser surface is drawn at correct position
laser_part_length = laser_sprite_width*laser_length  //compute what section of laser sprite we will be drawing to the laser surface
laser_draw_length = laser_max_length / laser_sprite_width * laser_length;  //compute xscale to stretch laser surface
laser_direction = image_angle;  //angle of laser
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//DRAW LASER
    //Create surface if it doesn't exist.
    //we need to draw the laser to the surface first, so that we can draw a section of the laser sprite rotated.
    //because unfortunately draw_sprite_part_ext doesn't do rotations.  :(
    //NOTE:  This should be a global surface re-used by all objects that fire lasers.
    if !surface_exists(laser_surf)
        laser_surf = surface_create(laser_sprite_width, laser_sprite_height);
    surface_set_target(laser_surf);
    
    
    draw_clear(c_black);  //clear surface.    
    
    draw_set_blend_mode(bm_add);
    draw_sprite_part_ext(sprBeam, sprBeam.sprite_index, 0, 0, laser_part_length, 6, 0, laser_sprite_height * 0.5 - 1.0, 1.0 / laser_length, 1.0, c_white, 1);
    
    surface_reset_target();
    
    //now draw the surface
    draw_surface_ext(laser_surf, laser_surface_x, laser_surface_y, laser_draw_length, 1.0, laser_direction, c_white, 1.0);     
    
    //draw a flash of light in case the laser has hit something.
    //NOTE:  the scale of this flash will be dependant on how far away the target is from the shooter.  (simulating the laser weakening over distance)
    if laser_hit
        draw_sprite_ext(sprLaserImpact, irandom(1), laser_end_x, laser_end_y, 1, 1, gunAngle - 180, c_white, 1);
    
    
    draw_set_blend_mode(bm_normal);          
    



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
