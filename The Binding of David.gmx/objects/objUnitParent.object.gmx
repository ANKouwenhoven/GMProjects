<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
hp = 1000;
stdhp = hp;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_list_find_index(dropStatus,'key') != -1
    {
    key = instance_create(x,y,objPickup)
    pickupID = 0
    key.pickupID = pickupID
    key.image_index = pickupID
    }
if ds_list_find_index(dropStatus,'coin') != -1
    {
    coin = instance_create(x,y,objPickup)
    pickupID = 1
    coin.pickupID = pickupID
    coin.image_index = pickupID
    }
if ds_list_find_index(dropStatus,'powder') != -1
    {
    powder = instance_create(x,y,objPickup)
    pickupID = 2
    powder.pickupID = pickupID
    powder.image_index = pickupID
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Alarm for restoring original color to a unit.
scrRestore(c1,c2,c3)
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Alarm for controlling HP regeneration; health regenerates when alarm[1] == -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Alarm for controlling a weapon's fire rate; a unit can shoot when alarm[0] == -1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objProjectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if charID != 'player'
{
image_blend = make_color_rgb(204,31,31)
alarm[2] = 3
//Set the alarm to prevent health regeneration for a period of time
alarm[1] = room_speed*(4-(hp/50));
//Create particle effect
repeat (2)
    {
    i = instance_create(x,y,objDust);
    i.image_blend = objProjectile.image_blend;
    i.speed = random(8);
    i.direction = other.direction-45+random(90);
    i.image_alpha = 0.5+random(0.5);
    i.image_angle = random(360);
    i.image_index = random(image_number);
    i.image_speed = 0;
    }
if instance_exists(other)
    {
    collidedshot = instance_nearest(x,y,objProjectile)
    finaldamage = collidedshot.damage
    if ds_list_find_index(collidedshot.currentStatus,'homing') != -1
            {
            ds_list_delete(collidedshot.currentStatus,'homing')
            }
        if ds_list_find_index(collidedshot.currentStatus,'freezing') != -1 &amp;&amp; ds_list_find_index(mobStatus,'frozen') == -1
            {
            if ds_list_find_index(mobStatus,'frozen') == -1 ds_list_copy(backupStatus,mobStatus)
            ds_list_add(mobStatus,'frozen')
            }
        if ds_list_find_index(collidedshot.currentStatus,'slowing') != -1 &amp;&amp; ds_list_find_index(mobStatus,'slowed') == -1
            {
            ds_list_add(mobStatus,'slowed')
            }
        if ds_list_find_index(collidedshot.currentStatus,'burning') != -1 &amp;&amp; ds_list_find_index(mobStatus,'burning') == -1
            {
            ds_list_add(mobStatus,'burning')
            }
    if instance_exists(objFairy)
        {
        if ds_list_find_index(targetingStatus,'wispTarget') != -1 &amp;&amp; objFairy.status = 'circling'
            {
            finaldamage = 2*collidedshot.damage
            repeat(0.5*random(finaldamage))
                {
                spark = instance_create(x,y,objSparkle)
                spark.direction = random(360)
                spark.speed = random(0.8)
                }
            }
        }
    if (other.team == team) or ds_list_find_index(collidedshot.currentStatus,'piercing') != -1
        exit;
    else
        {
        with (other){
        b = instance_create(x,y,objProjBlast)
        b.image_blend = image_blend
        instance_destroy();}
        }
    }
hp -= finaldamage;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>{
//Draw the unit
draw_set_color(image_blend);
draw_circle(x,y,8,0);
draw_healthbar(x-20,y-30,x+20,y-25,hp,c_black,c_red,c_green,1,0,0)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
